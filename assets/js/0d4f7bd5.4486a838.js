"use strict";(self.webpackChunkaminsaied=self.webpackChunkaminsaied||[]).push([[5543],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,g=m["".concat(s,".").concat(d)]||m[d]||c[d]||l;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5926:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const l={},o="Manage logs via the AML Python SDK",i={unversionedId:"dsref/azure/azure-ml/logs",id:"dsref/azure/azure-ml/logs",title:"Manage logs via the AML Python SDK",description:"Get AML experiment",source:"@site/docs/dsref/azure/azure-ml/logs.md",sourceDirName:"dsref/azure/azure-ml",slug:"/dsref/azure/azure-ml/logs",permalink:"/docs/dsref/azure/azure-ml/logs",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"dsrefSidebar",previous:{title:"GitHub Workflows",permalink:"/docs/dsref/azure/azure-ml/github-workflows"},next:{title:"Service Principle Authentication",permalink:"/docs/dsref/azure/azure-ml/service-principle"}},s={},p=[{value:"Get AML experiment",id:"get-aml-experiment",level:2},{value:"Get run of interest",id:"get-run-of-interest",level:2},{value:"Get the logs for a given run",id:"get-the-logs-for-a-given-run",level:2},{value:"Process logs with sed",id:"process-logs-with-sed",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"manage-logs-via-the-aml-python-sdk"},"Manage logs via the AML Python SDK"),(0,a.kt)("h2",{id:"get-aml-experiment"},"Get AML experiment"),(0,a.kt)("p",null,"Get handle on experiment:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"ws = Workspace.get(...)\n\nexp = Experiment(ws, name)\n")),(0,a.kt)("p",null,"Or you can get a dictionary (",(0,a.kt)("inlineCode",{parentName:"p"},"ws.experiments: Dict[str, Experiment]"),") mapping experiment names to AML experiments. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"exp = ws.experiments['my-experiment']\n")),(0,a.kt)("h2",{id:"get-run-of-interest"},"Get run of interest"),(0,a.kt)("p",null,"Track down the run you are interested in. The ",(0,a.kt)("inlineCode",{parentName:"p"},"get_runs")," method will return a generator of all the runs in that experiment."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"for run in exp.get_runs():\n    ...\n")),(0,a.kt)("h2",{id:"get-the-logs-for-a-given-run"},"Get the logs for a given run"),(0,a.kt)("p",null,"Once you have the ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," object you care about you can get it's logs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# get all logs\nrun.get_all_logs(destination='aml-logs')\n\n# get specific logs\nrun.download_file(\n    name='azureml-logs/70_driver_log.txt', \n    output_file_path='aml-logs',\n    )\n")),(0,a.kt)("p",null,"That will download a copy of the logs to the directory specified. You can now parse through these using your favorite tools!"),(0,a.kt)("h2",{id:"process-logs-with-sed"},"Process logs with sed"),(0,a.kt)("p",null,"Example searching thorugh 70_driver_logs.txt from the command line with sed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cat 70_driver_log.txt | sed -n -E '/^(.*)(Error|fail)(.*)$/p'\n")),(0,a.kt)("p",null,"will return every line with containing ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"fail"),"."),(0,a.kt)("p",null,"Notes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-n")," means quiet: By default, ",(0,a.kt)("inlineCode",{parentName:"li"},"sed")," prints all lines. We\u2019d see all the text in the file with the matching lines printed twice. To prevent this, we\u2019ll use the -n (quiet) option to suppress the unmatched text"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-E")," will use a more modern regex syntax"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"^")," matches start of a line, ",(0,a.kt)("inlineCode",{parentName:"li"},"$")," matches end of line"),(0,a.kt)("li",{parentName:"ul"},"More on ",(0,a.kt)("inlineCode",{parentName:"li"},"sed"),": ",(0,a.kt)("a",{parentName:"li",href:"https://www.howtogeek.com/666395/how-to-use-the-sed-command-on-linux/"},"howtogeek article"))))}c.isMDXComponent=!0}}]);