"use strict";(self.webpackChunkaminsaied=self.webpackChunkaminsaied||[]).push([[5419],{3905:(e,r,n)=>{n.d(r,{Zo:()=>s,kt:()=>d});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=t.createContext({}),p=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},s=function(e){var r=p(e.components);return t.createElement(l.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?t.createElement(g,o(o({ref:r},s),{},{components:n})):t.createElement(g,o({ref:r},s))}));function d(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7953:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var t=n(7462),a=(n(7294),n(3905));const i={title:"Git"},o=void 0,c={unversionedId:"dsref/linux/git",id:"dsref/linux/git",title:"Git",description:"See upstream branch names",source:"@site/docs/dsref/linux/git.md",sourceDirName:"dsref/linux",slug:"/dsref/linux/git",permalink:"/docs/dsref/linux/git",draft:!1,tags:[],version:"current",frontMatter:{title:"Git"},sidebar:"dsrefSidebar",previous:{title:"Dotfiles",permalink:"/docs/dsref/linux/dotfiles"},next:{title:"Python on Ubuntu",permalink:"/docs/dsref/linux/python"}},l={},p=[{value:"See upstream branch names",id:"see-upstream-branch-names",level:3},{value:"Merge with remote branch",id:"merge-with-remote-branch",level:3},{value:"Migrate repo keeping commit history",id:"migrate-repo-keeping-commit-history",level:3}],s={toc:p};function m(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},s,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"see-upstream-branch-names"},"See upstream branch names"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git branch -vv\n")),(0,a.kt)("p",null,"output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"u/amsaied/async          945c1951 [origin/u/amsaied/async: ahead 2] merge master\nu/amsaied/async-args     9ee24a21 [origin/u/amsaied/async-args] rename class to AsyncConfig\n...\n")),(0,a.kt)("p",null,"The upstream name is in ",(0,a.kt)("inlineCode",{parentName:"p"},"[")," ",(0,a.kt)("inlineCode",{parentName:"p"},"]"),", i.e.: ",(0,a.kt)("inlineCode",{parentName:"p"},"[<upstream-branch-name>]")),(0,a.kt)("h3",{id:"merge-with-remote-branch"},"Merge with remote branch"),(0,a.kt)("p",null,"To merge directly with an upstream branch without having to pull it locally, first\nfind the name of the upstream (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"git branch -vv"),") and then run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git merge <upstream-branch>\n")),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout branch1\ngit branch -vv\n# branch1   945c1951    [origin/branch1] commit messages rock\n# branch2   9ee24a21    [origin/branch2: ahead 1] made an important change\ngit merge origin/branch2\n# this will merge origin/branch2's important change into (local) branch1\n")),(0,a.kt)("h3",{id:"migrate-repo-keeping-commit-history"},"Migrate repo keeping commit history"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# (mirrored) clone\ngit clone --mirror old-repo-url new-repo\n\n# remove old remote\ncd new-repo\ngit remote remove origin\n\n# add new remote\ngit remote add origin new-repo-url\n\n# push\ngit push --all\ngit push --tags\n\n# clone new repo\ncd ..\nrm -rf new-repo\ngit clone new-repo-url new-repo\n")))}m.isMDXComponent=!0}}]);