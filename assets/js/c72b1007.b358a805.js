"use strict";(self.webpackChunkaminsaied=self.webpackChunkaminsaied||[]).push([[9396],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,h=c["".concat(i,".").concat(m)]||c[m]||d[m]||l;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=c;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6262:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const l={title:"Windows Subsystem for Linux (WSL)"},o=void 0,s={unversionedId:"dsref/linux/wsl",id:"dsref/linux/wsl",title:"Windows Subsystem for Linux (WSL)",description:"Notes for setting up WSL.",source:"@site/docs/dsref/linux/wsl.md",sourceDirName:"dsref/linux",slug:"/dsref/linux/wsl",permalink:"/docs/dsref/linux/wsl",draft:!1,tags:[],version:"current",frontMatter:{title:"Windows Subsystem for Linux (WSL)"},sidebar:"dsrefSidebar",previous:{title:"Vim",permalink:"/docs/dsref/linux/vim"},next:{title:"ZSH",permalink:"/docs/dsref/linux/zshrc"}},i={},p=[{value:"WSL 2",id:"wsl-2",level:2},{value:"Git integration",id:"git-integration",level:2},{value:"Oh-My-ZSH",id:"oh-my-zsh",level:2},{value:"Get Python",id:"get-python",level:2},{value:"Get miniconda",id:"get-miniconda",level:2},{value:"SSH into WSL",id:"ssh-into-wsl",level:2}],u={toc:p};function d(e){let{components:t,...l}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Notes for setting up WSL."),(0,a.kt)("h2",{id:"wsl-2"},"WSL 2"),(0,a.kt)("p",null,"Make sure you're running WSL 2. Open a powershell and run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},"$ amsaied> wsl -l -v\n  NAME                   STATE           VERSION\n* Ubuntu                 Running         1\n")),(0,a.kt)("p",null,"To upgrade ",(0,a.kt)("inlineCode",{parentName:"p"},"Ubuntu")," to WSL 2 run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},"$ wsl --set-version Ubuntu 2\n")),(0,a.kt)("p",null,"You can confirm it by running ",(0,a.kt)("inlineCode",{parentName:"p"},"wsl -l -v")," again. To make WSL 2 your default architecture run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-powershell"},"wsl --set-default-version 2\n")),(0,a.kt)("h2",{id:"git-integration"},"Git integration"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("em",{parentName:"p"},"Git Credential Manager")," to handle authentication - even if you have 2FA, Azure Active Directory or SSH requirements. Just run the following command and you're good to go."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ git config --global credential.helper "/mnt/c/Program\\ Files/Git/mingw64/libexec/git-core/git-credential-manager.exe"\n')),(0,a.kt)("h2",{id:"oh-my-zsh"},"Oh-My-ZSH"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ apt install zsh\n$ sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"\n')),(0,a.kt)("h2",{id:"get-python"},"Get Python"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo apt update && sudo apt upgrade\n$ sudo apt install python3 python3-pip ipython\n")),(0,a.kt)("h2",{id:"get-miniconda"},"Get miniconda"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh\nbash ~/miniconda.sh -b -p ~/miniconda \nrm ~/miniconda.sh\n")),(0,a.kt)("p",null,"Add miniconda to your path in the ",(0,a.kt)("inlineCode",{parentName:"p"},".zshrc")," by adding"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"export PATH=~/miniconda/bin:$PATH\n")),(0,a.kt)("h2",{id:"ssh-into-wsl"},"SSH into WSL"),(0,a.kt)("p",null,"My set up involves two machines (work and laptop). I occasionally (often!) find myself working on one, but needing some changes I made on the other. A useful solution is to SSH into the other machine and push the changes. Here's how to set that up with WSL."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 1 - Edit the SSH Daemon"),"  "),(0,a.kt)("p",null,"Reinstall OpenSSH:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo dpkg-reconfigure openssh-server\n")),(0,a.kt)("p",null,"Edit the ssh deamon config:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/ssh/sshd_config\n")),(0,a.kt)("p",null,"and make the following changes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set ",(0,a.kt)("inlineCode",{parentName:"li"},"Port 2222")," (or at least, change it from port 22)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PasswordAuthentication yes"))),(0,a.kt)("p",null,"(The corresponding lines may already exist and need editing, or may be commented out.)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 2 - Open port in Windows Firewall"),"  "),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Following ",(0,a.kt)("a",{parentName:"em",href:"https://jeetblogs.org/post/sshing-into-a-windows-wsl-linux-subsystem/"},"this guide")),".  "),(0,a.kt)("p",null,"Open up port 2222 (or whatever port you set in the ssh daemon config) in the Windows firewall:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Press Windows Key > Search WF.msc > Inbound Rules > Add New Rule"),(0,a.kt)("li",{parentName:"ul"},"New Rule > Port > TCP > Specific local ports: 2222 > Allow connections > When does the rule apply?: Check all boxes")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"windows-firewall",src:n(1383).Z,width:"1417",height:"733"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 3 - Restart the SSH Server"),"  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo service ssh --full-restart\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note.")," If you meet the error"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sshd: no hostkeys available -- exiting.\n")),(0,a.kt)("p",null,"you need to generate ssh keypair in ",(0,a.kt)("inlineCode",{parentName:"p"},"\\etc\\ssh"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd /etc/ssh\nssh-keygen -A\n")),(0,a.kt)("p",null,"(Now I attempted to run ",(0,a.kt)("inlineCode",{parentName:"p"},"sudo service ssh --full-restart"),". It did not complete succesfully, but the problem was resolved. Not sure if this partially completed step was needed...)"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 4 - Get your IP address"),"  "),(0,a.kt)("p",null,"Run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"ip address show\n")),(0,a.kt)("p",null,"Look for the ",(0,a.kt)("inlineCode",{parentName:"p"},"eth0")," section in the output and find the IP address. Something like this"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:'language-hl_lines="4"'},"...\n4: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:15:5d:23:ee:e3 brd ff:ff:ff:ff:ff:ff\n    inet 172.22.23.249/20 brd 172.22.31.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::215:5dff:fe23:eee3/64 scope link\n       valid_lft forever preferred_lft forever\n...\n")))}d.isMDXComponent=!0},1383:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/windows-firewall-c5dfea06b4459e732147c64d503f8115.png"}}]);